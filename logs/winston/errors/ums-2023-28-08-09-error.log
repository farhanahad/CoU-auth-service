{
  service: 'user-service',
  _readableState: ReadableState {
    objectMode: false,
    highWaterMark: 16384,
    buffer: BufferList { head: null, tail: null, length: 0 },
    length: 0,
    pipes: [],
    flowing: true,
    ended: true,
    endEmitted: true,
    reading: false,
    constructed: true,
    sync: false,
    needReadable: false,
    emittedReadable: false,
    readableListening: false,
    resumeScheduled: false,
    errorEmitted: false,
    emitClose: true,
    autoDestroy: true,
    destroyed: true,
    errored: null,
    closed: true,
    closeEmitted: true,
    defaultEncoding: 'utf8',
    awaitDrainWriters: null,
    multiAwaitDrain: false,
    readingMore: false,
    dataEmitted: true,
    decoder: null,
    encoding: null,
    [Symbol(kPaused)]: false
  },
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: <ref *3> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _closeAfterHandlingError: false,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      constructed: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: true,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      dataEmitted: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    _events: [Object: null prototype] {
      end: [
        [Function: onReadableStreamEnd],
        [Function: bound socketOnEnd]
      ],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Function: bound socketOnClose],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: <ref *2> Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      joinDuplicateHeaders: undefined,
      _events: [Object: null prototype] {
        request: <ref *1> [Function: app] {
          _events: [Object: null prototype] { mount: [Function: onmount] },
          _eventsCount: 1,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames],
          init: [Function: init],
          defaultConfiguration: [Function: defaultConfiguration],
          lazyrouter: [Function: lazyrouter],
          handle: [Function: handle],
          use: [Function: use],
          route: [Function: route],
          engine: [Function: engine],
          param: [Function: param],
          set: [Function: set],
          path: [Function: path],
          enabled: [Function: enabled],
          disabled: [Function: disabled],
          enable: [Function: enable],
          disable: [Function: disable],
          acl: [Function (anonymous)],
          bind: [Function (anonymous)],
          checkout: [Function (anonymous)],
          connect: [Function (anonymous)],
          copy: [Function (anonymous)],
          delete: [Function (anonymous)],
          get: [Function (anonymous)],
          head: [Function (anonymous)],
          link: [Function (anonymous)],
          lock: [Function (anonymous)],
          'm-search': [Function (anonymous)],
          merge: [Function (anonymous)],
          mkactivity: [Function (anonymous)],
          mkcalendar: [Function (anonymous)],
          mkcol: [Function (anonymous)],
          move: [Function (anonymous)],
          notify: [Function (anonymous)],
          options: [Function (anonymous)],
          patch: [Function (anonymous)],
          post: [Function (anonymous)],
          propfind: [Function (anonymous)],
          proppatch: [Function (anonymous)],
          purge: [Function (anonymous)],
          put: [Function (anonymous)],
          rebind: [Function (anonymous)],
          report: [Function (anonymous)],
          search: [Function (anonymous)],
          source: [Function (anonymous)],
          subscribe: [Function (anonymous)],
          trace: [Function (anonymous)],
          unbind: [Function (anonymous)],
          unlink: [Function (anonymous)],
          unlock: [Function (anonymous)],
          unsubscribe: [Function (anonymous)],
          all: [Function: all],
          del: [Function (anonymous)],
          render: [Function: render],
          listen: [Function: listen],
          request: IncomingMessage { app: [Circular *1] },
          response: ServerResponse { app: [Circular *1] },
          cache: {},
          engines: {},
          settings: {
            'x-powered-by': true,
            etag: 'weak',
            'etag fn': [Function: generateETag],
            env: 'development',
            'query parser': 'extended',
            'query parser fn': [Function: parseExtendedQueryString],
            'subdomain offset': 2,
            'trust proxy': false,
            'trust proxy fn': [Function: trustNone],
            view: [Function: View],
            views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
            'jsonp callback name': 'callback'
          },
          locals: [Object: null prototype] {
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
              'jsonp callback name': 'callback'
            }
          },
          mountpath: '/',
          _router: [Function: router] {
            params: {},
            _params: [],
            caseSensitive: false,
            mergeParams: undefined,
            strict: false,
            stack: [
              Layer {
                handle: [Function: query],
                name: 'query',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: expressInit],
                name: 'expressInit',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: corsMiddleware],
                name: 'corsMiddleware',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: jsonParser],
                name: 'jsonParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: urlencodedParser],
                name: 'urlencodedParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: router] {
                  params: {},
                  _params: [],
                  caseSensitive: undefined,
                  mergeParams: undefined,
                  strict: undefined,
                  stack: [
                    Layer {
                      handle: [Function: router] {
                        params: {},
                        _params: [],
                        caseSensitive: undefined,
                        mergeParams: undefined,
                        strict: undefined,
                        stack: [
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/create-user\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/create-user',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                },
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          }
                        ]
                      },
                      name: 'router',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/users\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: router] {
                        params: {},
                        _params: [],
                        caseSensitive: undefined,
                        mergeParams: undefined,
                        strict: undefined,
                        stack: [
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: {},
                            path: '/create-semester',
                            keys: [],
                            regexp: /^\/create-semester\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/create-semester',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                },
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: { id: 'create-semester' },
                            path: '/create-semester',
                            keys: [
                              {
                                name: 'id',
                                optional: false,
                                offset: 1
                              }
                            ],
                            regexp: /^\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/:id',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: { id: 'create-semester' },
                            path: '/create-semester',
                            keys: [
                              {
                                name: 'id',
                                optional: false,
                                offset: 1
                              }
                            ],
                            regexp: /^\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/:id',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'patch'
                                },
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'patch'
                                }
                              ],
                              methods: { patch: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: { id: 'create-semester' },
                            path: '/create-semester',
                            keys: [
                              {
                                name: 'id',
                                optional: false,
                                offset: 1
                              }
                            ],
                            regexp: /^\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/:id',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'delete'
                                }
                              ],
                              methods: { delete: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          }
                        ]
                      },
                      name: 'router',
                      params: {},
                      path: '/academic-semesters',
                      keys: [],
                      regexp: /^\/academic-semesters\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: undefined
                    }
                  ]
                },
                name: 'router',
                params: {},
                path: '/api/v1',
                keys: [],
                regexp: /^\/api\/v1\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              },
              Layer {
                handle: [Function: globalErrorHandler],
                name: 'globalErrorHandler',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              }
            ]
          }
        },
        connection: [Function: connectionListener]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: TCP {
        reading: false,
        onconnection: [Function: onconnection],
        [Symbol(owner_symbol)]: [Circular *2]
      },
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::5000',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 830,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 5280,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 829,
        [Symbol(triggerId)]: 0
      },
      [Symbol(kUniqueHeaders)]: null
    },
    _server: <ref *2> Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      joinDuplicateHeaders: undefined,
      _events: [Object: null prototype] {
        request: <ref *1> [Function: app] {
          _events: [Object: null prototype] { mount: [Function: onmount] },
          _eventsCount: 1,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames],
          init: [Function: init],
          defaultConfiguration: [Function: defaultConfiguration],
          lazyrouter: [Function: lazyrouter],
          handle: [Function: handle],
          use: [Function: use],
          route: [Function: route],
          engine: [Function: engine],
          param: [Function: param],
          set: [Function: set],
          path: [Function: path],
          enabled: [Function: enabled],
          disabled: [Function: disabled],
          enable: [Function: enable],
          disable: [Function: disable],
          acl: [Function (anonymous)],
          bind: [Function (anonymous)],
          checkout: [Function (anonymous)],
          connect: [Function (anonymous)],
          copy: [Function (anonymous)],
          delete: [Function (anonymous)],
          get: [Function (anonymous)],
          head: [Function (anonymous)],
          link: [Function (anonymous)],
          lock: [Function (anonymous)],
          'm-search': [Function (anonymous)],
          merge: [Function (anonymous)],
          mkactivity: [Function (anonymous)],
          mkcalendar: [Function (anonymous)],
          mkcol: [Function (anonymous)],
          move: [Function (anonymous)],
          notify: [Function (anonymous)],
          options: [Function (anonymous)],
          patch: [Function (anonymous)],
          post: [Function (anonymous)],
          propfind: [Function (anonymous)],
          proppatch: [Function (anonymous)],
          purge: [Function (anonymous)],
          put: [Function (anonymous)],
          rebind: [Function (anonymous)],
          report: [Function (anonymous)],
          search: [Function (anonymous)],
          source: [Function (anonymous)],
          subscribe: [Function (anonymous)],
          trace: [Function (anonymous)],
          unbind: [Function (anonymous)],
          unlink: [Function (anonymous)],
          unlock: [Function (anonymous)],
          unsubscribe: [Function (anonymous)],
          all: [Function: all],
          del: [Function (anonymous)],
          render: [Function: render],
          listen: [Function: listen],
          request: IncomingMessage { app: [Circular *1] },
          response: ServerResponse { app: [Circular *1] },
          cache: {},
          engines: {},
          settings: {
            'x-powered-by': true,
            etag: 'weak',
            'etag fn': [Function: generateETag],
            env: 'development',
            'query parser': 'extended',
            'query parser fn': [Function: parseExtendedQueryString],
            'subdomain offset': 2,
            'trust proxy': false,
            'trust proxy fn': [Function: trustNone],
            view: [Function: View],
            views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
            'jsonp callback name': 'callback'
          },
          locals: [Object: null prototype] {
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
              'jsonp callback name': 'callback'
            }
          },
          mountpath: '/',
          _router: [Function: router] {
            params: {},
            _params: [],
            caseSensitive: false,
            mergeParams: undefined,
            strict: false,
            stack: [
              Layer {
                handle: [Function: query],
                name: 'query',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: expressInit],
                name: 'expressInit',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: corsMiddleware],
                name: 'corsMiddleware',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: jsonParser],
                name: 'jsonParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: urlencodedParser],
                name: 'urlencodedParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: router] {
                  params: {},
                  _params: [],
                  caseSensitive: undefined,
                  mergeParams: undefined,
                  strict: undefined,
                  stack: [
                    Layer {
                      handle: [Function: router] {
                        params: {},
                        _params: [],
                        caseSensitive: undefined,
                        mergeParams: undefined,
                        strict: undefined,
                        stack: [
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/create-user\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/create-user',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                },
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          }
                        ]
                      },
                      name: 'router',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/users\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: router] {
                        params: {},
                        _params: [],
                        caseSensitive: undefined,
                        mergeParams: undefined,
                        strict: undefined,
                        stack: [
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: {},
                            path: '/create-semester',
                            keys: [],
                            regexp: /^\/create-semester\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/create-semester',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                },
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: { id: 'create-semester' },
                            path: '/create-semester',
                            keys: [
                              {
                                name: 'id',
                                optional: false,
                                offset: 1
                              }
                            ],
                            regexp: /^\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/:id',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: { id: 'create-semester' },
                            path: '/create-semester',
                            keys: [
                              {
                                name: 'id',
                                optional: false,
                                offset: 1
                              }
                            ],
                            regexp: /^\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/:id',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'patch'
                                },
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'patch'
                                }
                              ],
                              methods: { patch: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: { id: 'create-semester' },
                            path: '/create-semester',
                            keys: [
                              {
                                name: 'id',
                                optional: false,
                                offset: 1
                              }
                            ],
                            regexp: /^\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/:id',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'delete'
                                }
                              ],
                              methods: { delete: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          }
                        ]
                      },
                      name: 'router',
                      params: {},
                      path: '/academic-semesters',
                      keys: [],
                      regexp: /^\/academic-semesters\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: undefined
                    }
                  ]
                },
                name: 'router',
                params: {},
                path: '/api/v1',
                keys: [],
                regexp: /^\/api\/v1\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              },
              Layer {
                handle: [Function: globalErrorHandler],
                name: 'globalErrorHandler',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              }
            ]
          }
        },
        connection: [Function: connectionListener]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: TCP {
        reading: false,
        onconnection: [Function: onconnection],
        [Symbol(owner_symbol)]: [Circular *2]
      },
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::5000',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 830,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 5280,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 829,
        [Symbol(triggerId)]: 0
      },
      [Symbol(kUniqueHeaders)]: null
    },
    parser: HTTPParser {
      '0': null,
      '1': [Function: parserOnHeaders],
      '2': [Function: parserOnHeadersComplete],
      '3': [Function: parserOnBody],
      '4': [Function: parserOnMessageComplete],
      '5': [Function: bound onParserExecute],
      '6': [Function: bound onParserTimeout],
      _headers: [],
      _url: '',
      socket: [Circular *3],
      incoming: null,
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      [Symbol(resource_symbol)]: HTTPServerAsyncResource {
        type: 'HTTPINCOMINGMESSAGE',
        socket: [Circular *3]
      }
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    setEncoding: [Function: socketSetEncoding],
    _paused: false,
    _httpMessage: null,
    timeout: 5000,
    [Symbol(async_id_symbol)]: 941,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular *3]
    },
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 5000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 16969,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 1003,
      [Symbol(triggerId)]: 1000
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kSetNoDelay)]: true,
    [Symbol(kSetKeepAlive)]: false,
    [Symbol(kSetKeepAliveInitialDelay)]: 0,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: true,
  rawHeaders: [
    'Content-Type',
    'application/json',
    'User-Agent',
    'PostmanRuntime/7.32.3',
    'Accept',
    '*/*',
    'Postman-Token',
    '34ffad4c-f558-4b35-bf8a-7eed2e8f6a81',
    'Host',
    'localhost:5000',
    'Accept-Encoding',
    'gzip, deflate, br',
    'Connection',
    'keep-alive',
    'Content-Length',
    '117'
  ],
  rawTrailers: [],
  joinDuplicateHeaders: undefined,
  aborted: false,
  upgrade: false,
  url: '/api/v1/academic-semesters/create-semester',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client: <ref *3> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _closeAfterHandlingError: false,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      constructed: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: true,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      dataEmitted: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    _events: [Object: null prototype] {
      end: [
        [Function: onReadableStreamEnd],
        [Function: bound socketOnEnd]
      ],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Function: bound socketOnClose],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: <ref *2> Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      joinDuplicateHeaders: undefined,
      _events: [Object: null prototype] {
        request: <ref *1> [Function: app] {
          _events: [Object: null prototype] { mount: [Function: onmount] },
          _eventsCount: 1,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames],
          init: [Function: init],
          defaultConfiguration: [Function: defaultConfiguration],
          lazyrouter: [Function: lazyrouter],
          handle: [Function: handle],
          use: [Function: use],
          route: [Function: route],
          engine: [Function: engine],
          param: [Function: param],
          set: [Function: set],
          path: [Function: path],
          enabled: [Function: enabled],
          disabled: [Function: disabled],
          enable: [Function: enable],
          disable: [Function: disable],
          acl: [Function (anonymous)],
          bind: [Function (anonymous)],
          checkout: [Function (anonymous)],
          connect: [Function (anonymous)],
          copy: [Function (anonymous)],
          delete: [Function (anonymous)],
          get: [Function (anonymous)],
          head: [Function (anonymous)],
          link: [Function (anonymous)],
          lock: [Function (anonymous)],
          'm-search': [Function (anonymous)],
          merge: [Function (anonymous)],
          mkactivity: [Function (anonymous)],
          mkcalendar: [Function (anonymous)],
          mkcol: [Function (anonymous)],
          move: [Function (anonymous)],
          notify: [Function (anonymous)],
          options: [Function (anonymous)],
          patch: [Function (anonymous)],
          post: [Function (anonymous)],
          propfind: [Function (anonymous)],
          proppatch: [Function (anonymous)],
          purge: [Function (anonymous)],
          put: [Function (anonymous)],
          rebind: [Function (anonymous)],
          report: [Function (anonymous)],
          search: [Function (anonymous)],
          source: [Function (anonymous)],
          subscribe: [Function (anonymous)],
          trace: [Function (anonymous)],
          unbind: [Function (anonymous)],
          unlink: [Function (anonymous)],
          unlock: [Function (anonymous)],
          unsubscribe: [Function (anonymous)],
          all: [Function: all],
          del: [Function (anonymous)],
          render: [Function: render],
          listen: [Function: listen],
          request: IncomingMessage { app: [Circular *1] },
          response: ServerResponse { app: [Circular *1] },
          cache: {},
          engines: {},
          settings: {
            'x-powered-by': true,
            etag: 'weak',
            'etag fn': [Function: generateETag],
            env: 'development',
            'query parser': 'extended',
            'query parser fn': [Function: parseExtendedQueryString],
            'subdomain offset': 2,
            'trust proxy': false,
            'trust proxy fn': [Function: trustNone],
            view: [Function: View],
            views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
            'jsonp callback name': 'callback'
          },
          locals: [Object: null prototype] {
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
              'jsonp callback name': 'callback'
            }
          },
          mountpath: '/',
          _router: [Function: router] {
            params: {},
            _params: [],
            caseSensitive: false,
            mergeParams: undefined,
            strict: false,
            stack: [
              Layer {
                handle: [Function: query],
                name: 'query',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: expressInit],
                name: 'expressInit',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: corsMiddleware],
                name: 'corsMiddleware',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: jsonParser],
                name: 'jsonParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: urlencodedParser],
                name: 'urlencodedParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: router] {
                  params: {},
                  _params: [],
                  caseSensitive: undefined,
                  mergeParams: undefined,
                  strict: undefined,
                  stack: [
                    Layer {
                      handle: [Function: router] {
                        params: {},
                        _params: [],
                        caseSensitive: undefined,
                        mergeParams: undefined,
                        strict: undefined,
                        stack: [
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/create-user\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/create-user',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                },
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          }
                        ]
                      },
                      name: 'router',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/users\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: router] {
                        params: {},
                        _params: [],
                        caseSensitive: undefined,
                        mergeParams: undefined,
                        strict: undefined,
                        stack: [
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: {},
                            path: '/create-semester',
                            keys: [],
                            regexp: /^\/create-semester\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/create-semester',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                },
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: { id: 'create-semester' },
                            path: '/create-semester',
                            keys: [
                              {
                                name: 'id',
                                optional: false,
                                offset: 1
                              }
                            ],
                            regexp: /^\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/:id',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: { id: 'create-semester' },
                            path: '/create-semester',
                            keys: [
                              {
                                name: 'id',
                                optional: false,
                                offset: 1
                              }
                            ],
                            regexp: /^\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/:id',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'patch'
                                },
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'patch'
                                }
                              ],
                              methods: { patch: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: { id: 'create-semester' },
                            path: '/create-semester',
                            keys: [
                              {
                                name: 'id',
                                optional: false,
                                offset: 1
                              }
                            ],
                            regexp: /^\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/:id',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'delete'
                                }
                              ],
                              methods: { delete: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          }
                        ]
                      },
                      name: 'router',
                      params: {},
                      path: '/academic-semesters',
                      keys: [],
                      regexp: /^\/academic-semesters\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: undefined
                    }
                  ]
                },
                name: 'router',
                params: {},
                path: '/api/v1',
                keys: [],
                regexp: /^\/api\/v1\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              },
              Layer {
                handle: [Function: globalErrorHandler],
                name: 'globalErrorHandler',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              }
            ]
          }
        },
        connection: [Function: connectionListener]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: TCP {
        reading: false,
        onconnection: [Function: onconnection],
        [Symbol(owner_symbol)]: [Circular *2]
      },
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::5000',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 830,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 5280,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 829,
        [Symbol(triggerId)]: 0
      },
      [Symbol(kUniqueHeaders)]: null
    },
    _server: <ref *2> Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      joinDuplicateHeaders: undefined,
      _events: [Object: null prototype] {
        request: <ref *1> [Function: app] {
          _events: [Object: null prototype] { mount: [Function: onmount] },
          _eventsCount: 1,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames],
          init: [Function: init],
          defaultConfiguration: [Function: defaultConfiguration],
          lazyrouter: [Function: lazyrouter],
          handle: [Function: handle],
          use: [Function: use],
          route: [Function: route],
          engine: [Function: engine],
          param: [Function: param],
          set: [Function: set],
          path: [Function: path],
          enabled: [Function: enabled],
          disabled: [Function: disabled],
          enable: [Function: enable],
          disable: [Function: disable],
          acl: [Function (anonymous)],
          bind: [Function (anonymous)],
          checkout: [Function (anonymous)],
          connect: [Function (anonymous)],
          copy: [Function (anonymous)],
          delete: [Function (anonymous)],
          get: [Function (anonymous)],
          head: [Function (anonymous)],
          link: [Function (anonymous)],
          lock: [Function (anonymous)],
          'm-search': [Function (anonymous)],
          merge: [Function (anonymous)],
          mkactivity: [Function (anonymous)],
          mkcalendar: [Function (anonymous)],
          mkcol: [Function (anonymous)],
          move: [Function (anonymous)],
          notify: [Function (anonymous)],
          options: [Function (anonymous)],
          patch: [Function (anonymous)],
          post: [Function (anonymous)],
          propfind: [Function (anonymous)],
          proppatch: [Function (anonymous)],
          purge: [Function (anonymous)],
          put: [Function (anonymous)],
          rebind: [Function (anonymous)],
          report: [Function (anonymous)],
          search: [Function (anonymous)],
          source: [Function (anonymous)],
          subscribe: [Function (anonymous)],
          trace: [Function (anonymous)],
          unbind: [Function (anonymous)],
          unlink: [Function (anonymous)],
          unlock: [Function (anonymous)],
          unsubscribe: [Function (anonymous)],
          all: [Function: all],
          del: [Function (anonymous)],
          render: [Function: render],
          listen: [Function: listen],
          request: IncomingMessage { app: [Circular *1] },
          response: ServerResponse { app: [Circular *1] },
          cache: {},
          engines: {},
          settings: {
            'x-powered-by': true,
            etag: 'weak',
            'etag fn': [Function: generateETag],
            env: 'development',
            'query parser': 'extended',
            'query parser fn': [Function: parseExtendedQueryString],
            'subdomain offset': 2,
            'trust proxy': false,
            'trust proxy fn': [Function: trustNone],
            view: [Function: View],
            views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
            'jsonp callback name': 'callback'
          },
          locals: [Object: null prototype] {
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
              'jsonp callback name': 'callback'
            }
          },
          mountpath: '/',
          _router: [Function: router] {
            params: {},
            _params: [],
            caseSensitive: false,
            mergeParams: undefined,
            strict: false,
            stack: [
              Layer {
                handle: [Function: query],
                name: 'query',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: expressInit],
                name: 'expressInit',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: corsMiddleware],
                name: 'corsMiddleware',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: jsonParser],
                name: 'jsonParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: urlencodedParser],
                name: 'urlencodedParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: router] {
                  params: {},
                  _params: [],
                  caseSensitive: undefined,
                  mergeParams: undefined,
                  strict: undefined,
                  stack: [
                    Layer {
                      handle: [Function: router] {
                        params: {},
                        _params: [],
                        caseSensitive: undefined,
                        mergeParams: undefined,
                        strict: undefined,
                        stack: [
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/create-user\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/create-user',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                },
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          }
                        ]
                      },
                      name: 'router',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/users\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: router] {
                        params: {},
                        _params: [],
                        caseSensitive: undefined,
                        mergeParams: undefined,
                        strict: undefined,
                        stack: [
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: {},
                            path: '/create-semester',
                            keys: [],
                            regexp: /^\/create-semester\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/create-semester',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                },
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: { id: 'create-semester' },
                            path: '/create-semester',
                            keys: [
                              {
                                name: 'id',
                                optional: false,
                                offset: 1
                              }
                            ],
                            regexp: /^\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/:id',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: { id: 'create-semester' },
                            path: '/create-semester',
                            keys: [
                              {
                                name: 'id',
                                optional: false,
                                offset: 1
                              }
                            ],
                            regexp: /^\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/:id',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'patch'
                                },
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'patch'
                                }
                              ],
                              methods: { patch: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: { id: 'create-semester' },
                            path: '/create-semester',
                            keys: [
                              {
                                name: 'id',
                                optional: false,
                                offset: 1
                              }
                            ],
                            regexp: /^\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/:id',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'delete'
                                }
                              ],
                              methods: { delete: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          }
                        ]
                      },
                      name: 'router',
                      params: {},
                      path: '/academic-semesters',
                      keys: [],
                      regexp: /^\/academic-semesters\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: undefined
                    }
                  ]
                },
                name: 'router',
                params: {},
                path: '/api/v1',
                keys: [],
                regexp: /^\/api\/v1\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              },
              Layer {
                handle: [Function: globalErrorHandler],
                name: 'globalErrorHandler',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: undefined,
                path: undefined,
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              }
            ]
          }
        },
        connection: [Function: connectionListener]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: TCP {
        reading: false,
        onconnection: [Function: onconnection],
        [Symbol(owner_symbol)]: [Circular *2]
      },
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::5000',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 830,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 5280,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 829,
        [Symbol(triggerId)]: 0
      },
      [Symbol(kUniqueHeaders)]: null
    },
    parser: HTTPParser {
      '0': null,
      '1': [Function: parserOnHeaders],
      '2': [Function: parserOnHeadersComplete],
      '3': [Function: parserOnBody],
      '4': [Function: parserOnMessageComplete],
      '5': [Function: bound onParserExecute],
      '6': [Function: bound onParserTimeout],
      _headers: [],
      _url: '',
      socket: [Circular *3],
      incoming: null,
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      [Symbol(resource_symbol)]: HTTPServerAsyncResource {
        type: 'HTTPINCOMINGMESSAGE',
        socket: [Circular *3]
      }
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    setEncoding: [Function: socketSetEncoding],
    _paused: false,
    _httpMessage: null,
    timeout: 5000,
    [Symbol(async_id_symbol)]: 941,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular *3]
    },
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 5000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 16969,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 1003,
      [Symbol(triggerId)]: 1000
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kSetNoDelay)]: true,
    [Symbol(kSetKeepAlive)]: false,
    [Symbol(kSetKeepAliveInitialDelay)]: 0,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _consuming: true,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/api/v1/academic-semesters/create-semester',
  _parsedUrl: Url {
    protocol: null,
    slashes: null,
    auth: null,
    host: null,
    port: null,
    hostname: null,
    hash: null,
    search: null,
    query: null,
    pathname: '/api/v1/academic-semesters/create-semester',
    path: '/api/v1/academic-semesters/create-semester',
    href: '/api/v1/academic-semesters/create-semester',
    _raw: '/api/v1/academic-semesters/create-semester'
  },
  params: {},
  query: {},
  res: <ref *4> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: '329',
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    socket: null,
    _header: 'HTTP/1.1 200 OK\r\n' +
      'X-Powered-By: Express\r\n' +
      'Access-Control-Allow-Origin: *\r\n' +
      'Content-Type: application/json; charset=utf-8\r\n' +
      'Content-Length: 329\r\n' +
      'ETag: W/"149-Dinyh4raj9wsFTBq7OFn0k9aWMk"\r\n' +
      'Date: Mon, 28 Aug 2023 03:09:38 GMT\r\n' +
      'Connection: keep-alive\r\n' +
      'Keep-Alive: timeout=5\r\n' +
      '\r\n',
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    req: IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        constructed: true,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        destroyed: true,
        errored: null,
        closed: true,
        closeEmitted: true,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      socket: <ref *3> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [Function: bound socketOnClose],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *2> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          requestTimeout: 300000,
          headersTimeout: 60000,
          keepAliveTimeout: 5000,
          connectionsCheckingInterval: 30000,
          joinDuplicateHeaders: undefined,
          _events: [Object: null prototype] {
            request: <ref *1> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *1] },
              response: ServerResponse { app: [Circular *1] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: corsMiddleware],
                    name: 'corsMiddleware',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [Function: router] {
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: [
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/create-user\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/create-user',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    },
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    }
                                  ],
                                  methods: { post: true }
                                }
                              }
                            ]
                          },
                          name: 'router',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/users\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: router] {
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: [
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: {},
                                path: '/create-semester',
                                keys: [],
                                regexp: /^\/create-semester\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/create-semester',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    },
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    }
                                  ],
                                  methods: { post: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: { id: 'create-semester' },
                                path: '/create-semester',
                                keys: [
                                  {
                                    name: 'id',
                                    optional: false,
                                    offset: 1
                                  }
                                ],
                                regexp: /^\/(?:([^\/]+?))\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/:id',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'get'
                                    }
                                  ],
                                  methods: { get: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: { id: 'create-semester' },
                                path: '/create-semester',
                                keys: [
                                  {
                                    name: 'id',
                                    optional: false,
                                    offset: 1
                                  }
                                ],
                                regexp: /^\/(?:([^\/]+?))\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/:id',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'patch'
                                    },
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'patch'
                                    }
                                  ],
                                  methods: { patch: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: { id: 'create-semester' },
                                path: '/create-semester',
                                keys: [
                                  {
                                    name: 'id',
                                    optional: false,
                                    offset: 1
                                  }
                                ],
                                regexp: /^\/(?:([^\/]+?))\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/:id',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'delete'
                                    }
                                  ],
                                  methods: { delete: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'get'
                                    }
                                  ],
                                  methods: { get: true }
                                }
                              }
                            ]
                          },
                          name: 'router',
                          params: {},
                          path: '/academic-semesters',
                          keys: [],
                          regexp: /^\/academic-semesters\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/api/v1',
                    keys: [],
                    regexp: /^\/api\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: globalErrorHandler],
                    name: 'globalErrorHandler',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *2]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          noDelay: true,
          keepAlive: false,
          keepAliveInitialDelay: 0,
          httpAllowHalfOpen: false,
          timeout: 0,
          maxHeadersCount: null,
          maxRequestsPerSocket: 0,
          _connectionKey: '6::::5000',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 830,
          [Symbol(http.server.connections)]: ConnectionsList {},
          [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
            _idleTimeout: 30000,
            _idlePrev: [TimersList],
            _idleNext: [TimersList],
            _idleStart: 5280,
            _onTimeout: [Function: bound checkConnections],
            _timerArgs: undefined,
            _repeat: 30000,
            _destroyed: false,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 829,
            [Symbol(triggerId)]: 0
          },
          [Symbol(kUniqueHeaders)]: null
        },
        _server: <ref *2> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          requestTimeout: 300000,
          headersTimeout: 60000,
          keepAliveTimeout: 5000,
          connectionsCheckingInterval: 30000,
          joinDuplicateHeaders: undefined,
          _events: [Object: null prototype] {
            request: <ref *1> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *1] },
              response: ServerResponse { app: [Circular *1] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: corsMiddleware],
                    name: 'corsMiddleware',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [Function: router] {
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: [
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/create-user\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/create-user',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    },
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    }
                                  ],
                                  methods: { post: true }
                                }
                              }
                            ]
                          },
                          name: 'router',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/users\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: router] {
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: [
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: {},
                                path: '/create-semester',
                                keys: [],
                                regexp: /^\/create-semester\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/create-semester',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    },
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    }
                                  ],
                                  methods: { post: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: { id: 'create-semester' },
                                path: '/create-semester',
                                keys: [
                                  {
                                    name: 'id',
                                    optional: false,
                                    offset: 1
                                  }
                                ],
                                regexp: /^\/(?:([^\/]+?))\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/:id',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'get'
                                    }
                                  ],
                                  methods: { get: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: { id: 'create-semester' },
                                path: '/create-semester',
                                keys: [
                                  {
                                    name: 'id',
                                    optional: false,
                                    offset: 1
                                  }
                                ],
                                regexp: /^\/(?:([^\/]+?))\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/:id',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'patch'
                                    },
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'patch'
                                    }
                                  ],
                                  methods: { patch: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: { id: 'create-semester' },
                                path: '/create-semester',
                                keys: [
                                  {
                                    name: 'id',
                                    optional: false,
                                    offset: 1
                                  }
                                ],
                                regexp: /^\/(?:([^\/]+?))\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/:id',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'delete'
                                    }
                                  ],
                                  methods: { delete: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'get'
                                    }
                                  ],
                                  methods: { get: true }
                                }
                              }
                            ]
                          },
                          name: 'router',
                          params: {},
                          path: '/academic-semesters',
                          keys: [],
                          regexp: /^\/academic-semesters\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/api/v1',
                    keys: [],
                    regexp: /^\/api\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: globalErrorHandler],
                    name: 'globalErrorHandler',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *2]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          noDelay: true,
          keepAlive: false,
          keepAliveInitialDelay: 0,
          httpAllowHalfOpen: false,
          timeout: 0,
          maxHeadersCount: null,
          maxRequestsPerSocket: 0,
          _connectionKey: '6::::5000',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 830,
          [Symbol(http.server.connections)]: ConnectionsList {},
          [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
            _idleTimeout: 30000,
            _idlePrev: [TimersList],
            _idleNext: [TimersList],
            _idleStart: 5280,
            _onTimeout: [Function: bound checkConnections],
            _timerArgs: undefined,
            _repeat: 30000,
            _destroyed: false,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 829,
            [Symbol(triggerId)]: 0
          },
          [Symbol(kUniqueHeaders)]: null
        },
        parser: HTTPParser {
          '0': null,
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *3],
          incoming: null,
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *3]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        setEncoding: [Function: socketSetEncoding],
        _paused: false,
        _httpMessage: null,
        timeout: 5000,
        [Symbol(async_id_symbol)]: 941,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *3]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: 5000,
          _idlePrev: [TimersList],
          _idleNext: [TimersList],
          _idleStart: 16969,
          _onTimeout: [Function: bound ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 1003,
          [Symbol(triggerId)]: 1000
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: false,
        [Symbol(kSetKeepAliveInitialDelay)]: 0,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'Content-Type',
        'application/json',
        'User-Agent',
        'PostmanRuntime/7.32.3',
        'Accept',
        '*/*',
        'Postman-Token',
        '34ffad4c-f558-4b35-bf8a-7eed2e8f6a81',
        'Host',
        'localhost:5000',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive',
        'Content-Length',
        '117'
      ],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '/api/v1/academic-semesters/create-semester',
      method: 'POST',
      statusCode: null,
      statusMessage: null,
      client: <ref *3> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [Function: bound socketOnClose],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *2> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          requestTimeout: 300000,
          headersTimeout: 60000,
          keepAliveTimeout: 5000,
          connectionsCheckingInterval: 30000,
          joinDuplicateHeaders: undefined,
          _events: [Object: null prototype] {
            request: <ref *1> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *1] },
              response: ServerResponse { app: [Circular *1] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: corsMiddleware],
                    name: 'corsMiddleware',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [Function: router] {
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: [
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/create-user\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/create-user',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    },
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    }
                                  ],
                                  methods: { post: true }
                                }
                              }
                            ]
                          },
                          name: 'router',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/users\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: router] {
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: [
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: {},
                                path: '/create-semester',
                                keys: [],
                                regexp: /^\/create-semester\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/create-semester',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    },
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    }
                                  ],
                                  methods: { post: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: { id: 'create-semester' },
                                path: '/create-semester',
                                keys: [
                                  {
                                    name: 'id',
                                    optional: false,
                                    offset: 1
                                  }
                                ],
                                regexp: /^\/(?:([^\/]+?))\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/:id',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'get'
                                    }
                                  ],
                                  methods: { get: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: { id: 'create-semester' },
                                path: '/create-semester',
                                keys: [
                                  {
                                    name: 'id',
                                    optional: false,
                                    offset: 1
                                  }
                                ],
                                regexp: /^\/(?:([^\/]+?))\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/:id',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'patch'
                                    },
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'patch'
                                    }
                                  ],
                                  methods: { patch: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: { id: 'create-semester' },
                                path: '/create-semester',
                                keys: [
                                  {
                                    name: 'id',
                                    optional: false,
                                    offset: 1
                                  }
                                ],
                                regexp: /^\/(?:([^\/]+?))\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/:id',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'delete'
                                    }
                                  ],
                                  methods: { delete: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'get'
                                    }
                                  ],
                                  methods: { get: true }
                                }
                              }
                            ]
                          },
                          name: 'router',
                          params: {},
                          path: '/academic-semesters',
                          keys: [],
                          regexp: /^\/academic-semesters\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/api/v1',
                    keys: [],
                    regexp: /^\/api\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: globalErrorHandler],
                    name: 'globalErrorHandler',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *2]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          noDelay: true,
          keepAlive: false,
          keepAliveInitialDelay: 0,
          httpAllowHalfOpen: false,
          timeout: 0,
          maxHeadersCount: null,
          maxRequestsPerSocket: 0,
          _connectionKey: '6::::5000',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 830,
          [Symbol(http.server.connections)]: ConnectionsList {},
          [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
            _idleTimeout: 30000,
            _idlePrev: [TimersList],
            _idleNext: [TimersList],
            _idleStart: 5280,
            _onTimeout: [Function: bound checkConnections],
            _timerArgs: undefined,
            _repeat: 30000,
            _destroyed: false,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 829,
            [Symbol(triggerId)]: 0
          },
          [Symbol(kUniqueHeaders)]: null
        },
        _server: <ref *2> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          requestTimeout: 300000,
          headersTimeout: 60000,
          keepAliveTimeout: 5000,
          connectionsCheckingInterval: 30000,
          joinDuplicateHeaders: undefined,
          _events: [Object: null prototype] {
            request: <ref *1> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *1] },
              response: ServerResponse { app: [Circular *1] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: corsMiddleware],
                    name: 'corsMiddleware',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [Function: router] {
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: [
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/create-user\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/create-user',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    },
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    }
                                  ],
                                  methods: { post: true }
                                }
                              }
                            ]
                          },
                          name: 'router',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/users\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: router] {
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: [
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: {},
                                path: '/create-semester',
                                keys: [],
                                regexp: /^\/create-semester\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/create-semester',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    },
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    }
                                  ],
                                  methods: { post: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: { id: 'create-semester' },
                                path: '/create-semester',
                                keys: [
                                  {
                                    name: 'id',
                                    optional: false,
                                    offset: 1
                                  }
                                ],
                                regexp: /^\/(?:([^\/]+?))\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/:id',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'get'
                                    }
                                  ],
                                  methods: { get: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: { id: 'create-semester' },
                                path: '/create-semester',
                                keys: [
                                  {
                                    name: 'id',
                                    optional: false,
                                    offset: 1
                                  }
                                ],
                                regexp: /^\/(?:([^\/]+?))\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/:id',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'patch'
                                    },
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'patch'
                                    }
                                  ],
                                  methods: { patch: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: { id: 'create-semester' },
                                path: '/create-semester',
                                keys: [
                                  {
                                    name: 'id',
                                    optional: false,
                                    offset: 1
                                  }
                                ],
                                regexp: /^\/(?:([^\/]+?))\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/:id',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'delete'
                                    }
                                  ],
                                  methods: { delete: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'get'
                                    }
                                  ],
                                  methods: { get: true }
                                }
                              }
                            ]
                          },
                          name: 'router',
                          params: {},
                          path: '/academic-semesters',
                          keys: [],
                          regexp: /^\/academic-semesters\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/api/v1',
                    keys: [],
                    regexp: /^\/api\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: globalErrorHandler],
                    name: 'globalErrorHandler',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: undefined,
                    path: undefined,
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *2]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          noDelay: true,
          keepAlive: false,
          keepAliveInitialDelay: 0,
          httpAllowHalfOpen: false,
          timeout: 0,
          maxHeadersCount: null,
          maxRequestsPerSocket: 0,
          _connectionKey: '6::::5000',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 830,
          [Symbol(http.server.connections)]: ConnectionsList {},
          [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
            _idleTimeout: 30000,
            _idlePrev: [TimersList],
            _idleNext: [TimersList],
            _idleStart: 5280,
            _onTimeout: [Function: bound checkConnections],
            _timerArgs: undefined,
            _repeat: 30000,
            _destroyed: false,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 829,
            [Symbol(triggerId)]: 0
          },
          [Symbol(kUniqueHeaders)]: null
        },
        parser: HTTPParser {
          '0': null,
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *3],
          incoming: null,
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *3]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        setEncoding: [Function: socketSetEncoding],
        _paused: false,
        _httpMessage: null,
        timeout: 5000,
        [Symbol(async_id_symbol)]: 941,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *3]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: 5000,
          _idlePrev: [TimersList],
          _idleNext: [TimersList],
          _idleStart: 16969,
          _onTimeout: [Function: bound ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 1003,
          [Symbol(triggerId)]: 1000
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: false,
        [Symbol(kSetKeepAliveInitialDelay)]: 0,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '',
      originalUrl: '/api/v1/academic-semesters/create-semester',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: null,
        query: null,
        pathname: '/api/v1/academic-semesters/create-semester',
        path: '/api/v1/academic-semesters/create-semester',
        href: '/api/v1/academic-semesters/create-semester',
        _raw: '/api/v1/academic-semesters/create-semester'
      },
      params: {},
      query: {},
      res: [Circular *4],
      body: {
        title: 'Autumn',
        year: '2027',
        code: '01',
        startMonth: 'January',
        endMonth: 'June'
      },
      _body: true,
      length: undefined,
      route: Route {
        path: '/create-semester',
        stack: [
          Layer {
            handle: [Function (anonymous)],
            name: '<anonymous>',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'post'
          },
          Layer {
            handle: [Function (anonymous)],
            name: '<anonymous>',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'post'
          }
        ],
        methods: { post: true }
      },
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        'content-type': 'application/json',
        'user-agent': 'PostmanRuntime/7.32.3',
        accept: '*/*',
        'postman-token': '34ffad4c-f558-4b35-bf8a-7eed2e8f6a81',
        host: 'localhost:5000',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'content-length': '117'
      },
      [Symbol(kHeadersCount)]: 16,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    _sent100: false,
    _expect_continue: false,
    _maxRequestsPerSocket: 0,
    locals: [Object: null prototype] {},
    statusCode: 200,
    statusMessage: 'OK',
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ],
      'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
      'content-length': [ 'Content-Length', '329' ],
      etag: [ 'ETag', 'W/"149-Dinyh4raj9wsFTBq7OFn0k9aWMk"' ]
    },
    [Symbol(errored)]: null,
    [Symbol(kUniqueHeaders)]: null
  },
  body: {
    title: 'Autumn',
    year: '2027',
    code: '01',
    startMonth: 'January',
    endMonth: 'June'
  },
  _body: true,
  length: undefined,
  route: Route {
    path: '/create-semester',
    stack: [
      Layer {
        handle: [Function (anonymous)],
        name: '<anonymous>',
        params: undefined,
        path: undefined,
        keys: [],
        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
        method: 'post'
      },
      Layer {
        handle: [Function (anonymous)],
        name: '<anonymous>',
        params: undefined,
        path: undefined,
        keys: [],
        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
        method: 'post'
      }
    ],
    methods: { post: true }
  },
  level: 'error',
  message: '🐱‍🏍 globalErrorHandler ~~',
  label: 'CoU',
  timestamp: '2023-08-28T03:09:38.074Z',
  [Symbol(kCapture)]: false,
  [Symbol(kHeaders)]: {
    'content-type': 'application/json',
    'user-agent': 'PostmanRuntime/7.32.3',
    accept: '*/*',
    'postman-token': '34ffad4c-f558-4b35-bf8a-7eed2e8f6a81',
    host: 'localhost:5000',
    'accept-encoding': 'gzip, deflate, br',
    connection: 'keep-alive',
    'content-length': '117'
  },
  [Symbol(kHeadersCount)]: 16,
  [Symbol(kTrailers)]: null,
  [Symbol(kTrailersCount)]: 0
}
{
  service: 'user-service',
  _readableState: ReadableState {
    objectMode: false,
    highWaterMark: 16384,
    buffer: BufferList { head: null, tail: null, length: 0 },
    length: 0,
    pipes: [],
    flowing: true,
    ended: true,
    endEmitted: true,
    reading: false,
    constructed: true,
    sync: false,
    needReadable: false,
    emittedReadable: false,
    readableListening: false,
    resumeScheduled: false,
    errorEmitted: false,
    emitClose: true,
    autoDestroy: true,
    destroyed: true,
    errored: null,
    closed: true,
    closeEmitted: true,
    defaultEncoding: 'utf8',
    awaitDrainWriters: null,
    multiAwaitDrain: false,
    readingMore: false,
    dataEmitted: true,
    decoder: null,
    encoding: null,
    [Symbol(kPaused)]: false
  },
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  socket: <ref *3> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _closeAfterHandlingError: false,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      constructed: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: true,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      dataEmitted: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    _events: [Object: null prototype] {
      end: [
        [Function: onReadableStreamEnd],
        [Function: bound socketOnEnd]
      ],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Function: bound socketOnClose],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: <ref *2> Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      joinDuplicateHeaders: undefined,
      _events: [Object: null prototype] {
        request: <ref *1> [Function: app] {
          _events: [Object: null prototype] { mount: [Function: onmount] },
          _eventsCount: 1,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames],
          init: [Function: init],
          defaultConfiguration: [Function: defaultConfiguration],
          lazyrouter: [Function: lazyrouter],
          handle: [Function: handle],
          use: [Function: use],
          route: [Function: route],
          engine: [Function: engine],
          param: [Function: param],
          set: [Function: set],
          path: [Function: path],
          enabled: [Function: enabled],
          disabled: [Function: disabled],
          enable: [Function: enable],
          disable: [Function: disable],
          acl: [Function (anonymous)],
          bind: [Function (anonymous)],
          checkout: [Function (anonymous)],
          connect: [Function (anonymous)],
          copy: [Function (anonymous)],
          delete: [Function (anonymous)],
          get: [Function (anonymous)],
          head: [Function (anonymous)],
          link: [Function (anonymous)],
          lock: [Function (anonymous)],
          'm-search': [Function (anonymous)],
          merge: [Function (anonymous)],
          mkactivity: [Function (anonymous)],
          mkcalendar: [Function (anonymous)],
          mkcol: [Function (anonymous)],
          move: [Function (anonymous)],
          notify: [Function (anonymous)],
          options: [Function (anonymous)],
          patch: [Function (anonymous)],
          post: [Function (anonymous)],
          propfind: [Function (anonymous)],
          proppatch: [Function (anonymous)],
          purge: [Function (anonymous)],
          put: [Function (anonymous)],
          rebind: [Function (anonymous)],
          report: [Function (anonymous)],
          search: [Function (anonymous)],
          source: [Function (anonymous)],
          subscribe: [Function (anonymous)],
          trace: [Function (anonymous)],
          unbind: [Function (anonymous)],
          unlink: [Function (anonymous)],
          unlock: [Function (anonymous)],
          unsubscribe: [Function (anonymous)],
          all: [Function: all],
          del: [Function (anonymous)],
          render: [Function: render],
          listen: [Function: listen],
          request: IncomingMessage { app: [Circular *1] },
          response: ServerResponse { app: [Circular *1] },
          cache: {},
          engines: {},
          settings: {
            'x-powered-by': true,
            etag: 'weak',
            'etag fn': [Function: generateETag],
            env: 'development',
            'query parser': 'extended',
            'query parser fn': [Function: parseExtendedQueryString],
            'subdomain offset': 2,
            'trust proxy': false,
            'trust proxy fn': [Function: trustNone],
            view: [Function: View],
            views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
            'jsonp callback name': 'callback'
          },
          locals: [Object: null prototype] {
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
              'jsonp callback name': 'callback'
            }
          },
          mountpath: '/',
          _router: [Function: router] {
            params: {},
            _params: [],
            caseSensitive: false,
            mergeParams: undefined,
            strict: false,
            stack: [
              Layer {
                handle: [Function: query],
                name: 'query',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: expressInit],
                name: 'expressInit',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: corsMiddleware],
                name: 'corsMiddleware',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: jsonParser],
                name: 'jsonParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: urlencodedParser],
                name: 'urlencodedParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: router] {
                  params: {},
                  _params: [],
                  caseSensitive: undefined,
                  mergeParams: undefined,
                  strict: undefined,
                  stack: [
                    Layer {
                      handle: [Function: router] {
                        params: {},
                        _params: [],
                        caseSensitive: undefined,
                        mergeParams: undefined,
                        strict: undefined,
                        stack: [
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/create-user\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/create-user',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                },
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          }
                        ]
                      },
                      name: 'router',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/users\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: router] {
                        params: {},
                        _params: [],
                        caseSensitive: undefined,
                        mergeParams: undefined,
                        strict: undefined,
                        stack: [
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: {},
                            path: '/create-semester',
                            keys: [],
                            regexp: /^\/create-semester\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/create-semester',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                },
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: { id: 'create-semester' },
                            path: '/create-semester',
                            keys: [
                              {
                                name: 'id',
                                optional: false,
                                offset: 1
                              }
                            ],
                            regexp: /^\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/:id',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: { id: 'create-semester' },
                            path: '/create-semester',
                            keys: [
                              {
                                name: 'id',
                                optional: false,
                                offset: 1
                              }
                            ],
                            regexp: /^\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/:id',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'patch'
                                },
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'patch'
                                }
                              ],
                              methods: { patch: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: { id: 'create-semester' },
                            path: '/create-semester',
                            keys: [
                              {
                                name: 'id',
                                optional: false,
                                offset: 1
                              }
                            ],
                            regexp: /^\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/:id',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'delete'
                                }
                              ],
                              methods: { delete: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          }
                        ]
                      },
                      name: 'router',
                      params: {},
                      path: '/academic-semesters',
                      keys: [],
                      regexp: /^\/academic-semesters\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: undefined
                    }
                  ]
                },
                name: 'router',
                params: {},
                path: '/api/v1',
                keys: [],
                regexp: /^\/api\/v1\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              },
              Layer {
                handle: [Function: globalErrorHandler],
                name: 'globalErrorHandler',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              }
            ]
          }
        },
        connection: [Function: connectionListener]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: TCP {
        reading: false,
        onconnection: [Function: onconnection],
        [Symbol(owner_symbol)]: [Circular *2]
      },
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::5000',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 830,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 65305,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 829,
        [Symbol(triggerId)]: 0
      },
      [Symbol(kUniqueHeaders)]: null
    },
    _server: <ref *2> Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      joinDuplicateHeaders: undefined,
      _events: [Object: null prototype] {
        request: <ref *1> [Function: app] {
          _events: [Object: null prototype] { mount: [Function: onmount] },
          _eventsCount: 1,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames],
          init: [Function: init],
          defaultConfiguration: [Function: defaultConfiguration],
          lazyrouter: [Function: lazyrouter],
          handle: [Function: handle],
          use: [Function: use],
          route: [Function: route],
          engine: [Function: engine],
          param: [Function: param],
          set: [Function: set],
          path: [Function: path],
          enabled: [Function: enabled],
          disabled: [Function: disabled],
          enable: [Function: enable],
          disable: [Function: disable],
          acl: [Function (anonymous)],
          bind: [Function (anonymous)],
          checkout: [Function (anonymous)],
          connect: [Function (anonymous)],
          copy: [Function (anonymous)],
          delete: [Function (anonymous)],
          get: [Function (anonymous)],
          head: [Function (anonymous)],
          link: [Function (anonymous)],
          lock: [Function (anonymous)],
          'm-search': [Function (anonymous)],
          merge: [Function (anonymous)],
          mkactivity: [Function (anonymous)],
          mkcalendar: [Function (anonymous)],
          mkcol: [Function (anonymous)],
          move: [Function (anonymous)],
          notify: [Function (anonymous)],
          options: [Function (anonymous)],
          patch: [Function (anonymous)],
          post: [Function (anonymous)],
          propfind: [Function (anonymous)],
          proppatch: [Function (anonymous)],
          purge: [Function (anonymous)],
          put: [Function (anonymous)],
          rebind: [Function (anonymous)],
          report: [Function (anonymous)],
          search: [Function (anonymous)],
          source: [Function (anonymous)],
          subscribe: [Function (anonymous)],
          trace: [Function (anonymous)],
          unbind: [Function (anonymous)],
          unlink: [Function (anonymous)],
          unlock: [Function (anonymous)],
          unsubscribe: [Function (anonymous)],
          all: [Function: all],
          del: [Function (anonymous)],
          render: [Function: render],
          listen: [Function: listen],
          request: IncomingMessage { app: [Circular *1] },
          response: ServerResponse { app: [Circular *1] },
          cache: {},
          engines: {},
          settings: {
            'x-powered-by': true,
            etag: 'weak',
            'etag fn': [Function: generateETag],
            env: 'development',
            'query parser': 'extended',
            'query parser fn': [Function: parseExtendedQueryString],
            'subdomain offset': 2,
            'trust proxy': false,
            'trust proxy fn': [Function: trustNone],
            view: [Function: View],
            views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
            'jsonp callback name': 'callback'
          },
          locals: [Object: null prototype] {
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
              'jsonp callback name': 'callback'
            }
          },
          mountpath: '/',
          _router: [Function: router] {
            params: {},
            _params: [],
            caseSensitive: false,
            mergeParams: undefined,
            strict: false,
            stack: [
              Layer {
                handle: [Function: query],
                name: 'query',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: expressInit],
                name: 'expressInit',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: corsMiddleware],
                name: 'corsMiddleware',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: jsonParser],
                name: 'jsonParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: urlencodedParser],
                name: 'urlencodedParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: router] {
                  params: {},
                  _params: [],
                  caseSensitive: undefined,
                  mergeParams: undefined,
                  strict: undefined,
                  stack: [
                    Layer {
                      handle: [Function: router] {
                        params: {},
                        _params: [],
                        caseSensitive: undefined,
                        mergeParams: undefined,
                        strict: undefined,
                        stack: [
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/create-user\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/create-user',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                },
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          }
                        ]
                      },
                      name: 'router',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/users\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: router] {
                        params: {},
                        _params: [],
                        caseSensitive: undefined,
                        mergeParams: undefined,
                        strict: undefined,
                        stack: [
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: {},
                            path: '/create-semester',
                            keys: [],
                            regexp: /^\/create-semester\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/create-semester',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                },
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: { id: 'create-semester' },
                            path: '/create-semester',
                            keys: [
                              {
                                name: 'id',
                                optional: false,
                                offset: 1
                              }
                            ],
                            regexp: /^\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/:id',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: { id: 'create-semester' },
                            path: '/create-semester',
                            keys: [
                              {
                                name: 'id',
                                optional: false,
                                offset: 1
                              }
                            ],
                            regexp: /^\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/:id',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'patch'
                                },
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'patch'
                                }
                              ],
                              methods: { patch: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: { id: 'create-semester' },
                            path: '/create-semester',
                            keys: [
                              {
                                name: 'id',
                                optional: false,
                                offset: 1
                              }
                            ],
                            regexp: /^\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/:id',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'delete'
                                }
                              ],
                              methods: { delete: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          }
                        ]
                      },
                      name: 'router',
                      params: {},
                      path: '/academic-semesters',
                      keys: [],
                      regexp: /^\/academic-semesters\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: undefined
                    }
                  ]
                },
                name: 'router',
                params: {},
                path: '/api/v1',
                keys: [],
                regexp: /^\/api\/v1\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              },
              Layer {
                handle: [Function: globalErrorHandler],
                name: 'globalErrorHandler',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              }
            ]
          }
        },
        connection: [Function: connectionListener]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: TCP {
        reading: false,
        onconnection: [Function: onconnection],
        [Symbol(owner_symbol)]: [Circular *2]
      },
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::5000',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 830,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 65305,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 829,
        [Symbol(triggerId)]: 0
      },
      [Symbol(kUniqueHeaders)]: null
    },
    parser: HTTPParser {
      '0': null,
      '1': [Function: parserOnHeaders],
      '2': [Function: parserOnHeadersComplete],
      '3': [Function: parserOnBody],
      '4': [Function: parserOnMessageComplete],
      '5': [Function: bound onParserExecute],
      '6': [Function: bound onParserTimeout],
      _headers: [],
      _url: '',
      socket: [Circular *3],
      incoming: null,
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      [Symbol(resource_symbol)]: HTTPServerAsyncResource {
        type: 'HTTPINCOMINGMESSAGE',
        socket: [Circular *3]
      }
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    setEncoding: [Function: socketSetEncoding],
    _paused: false,
    _httpMessage: null,
    timeout: 5000,
    [Symbol(async_id_symbol)]: 1170,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular *3]
    },
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 5000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 86033,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 1223,
      [Symbol(triggerId)]: 1220
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kSetNoDelay)]: true,
    [Symbol(kSetKeepAlive)]: false,
    [Symbol(kSetKeepAliveInitialDelay)]: 0,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: true,
  rawHeaders: [
    'Content-Type',
    'application/json',
    'User-Agent',
    'PostmanRuntime/7.32.3',
    'Accept',
    '*/*',
    'Postman-Token',
    '03037cc9-2415-4aba-a4d7-02d75db8390a',
    'Host',
    'localhost:5000',
    'Accept-Encoding',
    'gzip, deflate, br',
    'Connection',
    'keep-alive',
    'Content-Length',
    '117'
  ],
  rawTrailers: [],
  joinDuplicateHeaders: undefined,
  aborted: false,
  upgrade: false,
  url: '/api/v1/academic-semesters/create-semester',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client: <ref *3> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _closeAfterHandlingError: false,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      constructed: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: true,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      dataEmitted: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    _events: [Object: null prototype] {
      end: [
        [Function: onReadableStreamEnd],
        [Function: bound socketOnEnd]
      ],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Function: bound socketOnClose],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: <ref *2> Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      joinDuplicateHeaders: undefined,
      _events: [Object: null prototype] {
        request: <ref *1> [Function: app] {
          _events: [Object: null prototype] { mount: [Function: onmount] },
          _eventsCount: 1,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames],
          init: [Function: init],
          defaultConfiguration: [Function: defaultConfiguration],
          lazyrouter: [Function: lazyrouter],
          handle: [Function: handle],
          use: [Function: use],
          route: [Function: route],
          engine: [Function: engine],
          param: [Function: param],
          set: [Function: set],
          path: [Function: path],
          enabled: [Function: enabled],
          disabled: [Function: disabled],
          enable: [Function: enable],
          disable: [Function: disable],
          acl: [Function (anonymous)],
          bind: [Function (anonymous)],
          checkout: [Function (anonymous)],
          connect: [Function (anonymous)],
          copy: [Function (anonymous)],
          delete: [Function (anonymous)],
          get: [Function (anonymous)],
          head: [Function (anonymous)],
          link: [Function (anonymous)],
          lock: [Function (anonymous)],
          'm-search': [Function (anonymous)],
          merge: [Function (anonymous)],
          mkactivity: [Function (anonymous)],
          mkcalendar: [Function (anonymous)],
          mkcol: [Function (anonymous)],
          move: [Function (anonymous)],
          notify: [Function (anonymous)],
          options: [Function (anonymous)],
          patch: [Function (anonymous)],
          post: [Function (anonymous)],
          propfind: [Function (anonymous)],
          proppatch: [Function (anonymous)],
          purge: [Function (anonymous)],
          put: [Function (anonymous)],
          rebind: [Function (anonymous)],
          report: [Function (anonymous)],
          search: [Function (anonymous)],
          source: [Function (anonymous)],
          subscribe: [Function (anonymous)],
          trace: [Function (anonymous)],
          unbind: [Function (anonymous)],
          unlink: [Function (anonymous)],
          unlock: [Function (anonymous)],
          unsubscribe: [Function (anonymous)],
          all: [Function: all],
          del: [Function (anonymous)],
          render: [Function: render],
          listen: [Function: listen],
          request: IncomingMessage { app: [Circular *1] },
          response: ServerResponse { app: [Circular *1] },
          cache: {},
          engines: {},
          settings: {
            'x-powered-by': true,
            etag: 'weak',
            'etag fn': [Function: generateETag],
            env: 'development',
            'query parser': 'extended',
            'query parser fn': [Function: parseExtendedQueryString],
            'subdomain offset': 2,
            'trust proxy': false,
            'trust proxy fn': [Function: trustNone],
            view: [Function: View],
            views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
            'jsonp callback name': 'callback'
          },
          locals: [Object: null prototype] {
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
              'jsonp callback name': 'callback'
            }
          },
          mountpath: '/',
          _router: [Function: router] {
            params: {},
            _params: [],
            caseSensitive: false,
            mergeParams: undefined,
            strict: false,
            stack: [
              Layer {
                handle: [Function: query],
                name: 'query',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: expressInit],
                name: 'expressInit',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: corsMiddleware],
                name: 'corsMiddleware',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: jsonParser],
                name: 'jsonParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: urlencodedParser],
                name: 'urlencodedParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: router] {
                  params: {},
                  _params: [],
                  caseSensitive: undefined,
                  mergeParams: undefined,
                  strict: undefined,
                  stack: [
                    Layer {
                      handle: [Function: router] {
                        params: {},
                        _params: [],
                        caseSensitive: undefined,
                        mergeParams: undefined,
                        strict: undefined,
                        stack: [
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/create-user\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/create-user',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                },
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          }
                        ]
                      },
                      name: 'router',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/users\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: router] {
                        params: {},
                        _params: [],
                        caseSensitive: undefined,
                        mergeParams: undefined,
                        strict: undefined,
                        stack: [
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: {},
                            path: '/create-semester',
                            keys: [],
                            regexp: /^\/create-semester\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/create-semester',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                },
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: { id: 'create-semester' },
                            path: '/create-semester',
                            keys: [
                              {
                                name: 'id',
                                optional: false,
                                offset: 1
                              }
                            ],
                            regexp: /^\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/:id',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: { id: 'create-semester' },
                            path: '/create-semester',
                            keys: [
                              {
                                name: 'id',
                                optional: false,
                                offset: 1
                              }
                            ],
                            regexp: /^\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/:id',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'patch'
                                },
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'patch'
                                }
                              ],
                              methods: { patch: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: { id: 'create-semester' },
                            path: '/create-semester',
                            keys: [
                              {
                                name: 'id',
                                optional: false,
                                offset: 1
                              }
                            ],
                            regexp: /^\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/:id',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'delete'
                                }
                              ],
                              methods: { delete: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          }
                        ]
                      },
                      name: 'router',
                      params: {},
                      path: '/academic-semesters',
                      keys: [],
                      regexp: /^\/academic-semesters\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: undefined
                    }
                  ]
                },
                name: 'router',
                params: {},
                path: '/api/v1',
                keys: [],
                regexp: /^\/api\/v1\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              },
              Layer {
                handle: [Function: globalErrorHandler],
                name: 'globalErrorHandler',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              }
            ]
          }
        },
        connection: [Function: connectionListener]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: TCP {
        reading: false,
        onconnection: [Function: onconnection],
        [Symbol(owner_symbol)]: [Circular *2]
      },
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::5000',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 830,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 65305,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 829,
        [Symbol(triggerId)]: 0
      },
      [Symbol(kUniqueHeaders)]: null
    },
    _server: <ref *2> Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      joinDuplicateHeaders: undefined,
      _events: [Object: null prototype] {
        request: <ref *1> [Function: app] {
          _events: [Object: null prototype] { mount: [Function: onmount] },
          _eventsCount: 1,
          _maxListeners: undefined,
          setMaxListeners: [Function: setMaxListeners],
          getMaxListeners: [Function: getMaxListeners],
          emit: [Function: emit],
          addListener: [Function: addListener],
          on: [Function: addListener],
          prependListener: [Function: prependListener],
          once: [Function: once],
          prependOnceListener: [Function: prependOnceListener],
          removeListener: [Function: removeListener],
          off: [Function: removeListener],
          removeAllListeners: [Function: removeAllListeners],
          listeners: [Function: listeners],
          rawListeners: [Function: rawListeners],
          listenerCount: [Function: listenerCount],
          eventNames: [Function: eventNames],
          init: [Function: init],
          defaultConfiguration: [Function: defaultConfiguration],
          lazyrouter: [Function: lazyrouter],
          handle: [Function: handle],
          use: [Function: use],
          route: [Function: route],
          engine: [Function: engine],
          param: [Function: param],
          set: [Function: set],
          path: [Function: path],
          enabled: [Function: enabled],
          disabled: [Function: disabled],
          enable: [Function: enable],
          disable: [Function: disable],
          acl: [Function (anonymous)],
          bind: [Function (anonymous)],
          checkout: [Function (anonymous)],
          connect: [Function (anonymous)],
          copy: [Function (anonymous)],
          delete: [Function (anonymous)],
          get: [Function (anonymous)],
          head: [Function (anonymous)],
          link: [Function (anonymous)],
          lock: [Function (anonymous)],
          'm-search': [Function (anonymous)],
          merge: [Function (anonymous)],
          mkactivity: [Function (anonymous)],
          mkcalendar: [Function (anonymous)],
          mkcol: [Function (anonymous)],
          move: [Function (anonymous)],
          notify: [Function (anonymous)],
          options: [Function (anonymous)],
          patch: [Function (anonymous)],
          post: [Function (anonymous)],
          propfind: [Function (anonymous)],
          proppatch: [Function (anonymous)],
          purge: [Function (anonymous)],
          put: [Function (anonymous)],
          rebind: [Function (anonymous)],
          report: [Function (anonymous)],
          search: [Function (anonymous)],
          source: [Function (anonymous)],
          subscribe: [Function (anonymous)],
          trace: [Function (anonymous)],
          unbind: [Function (anonymous)],
          unlink: [Function (anonymous)],
          unlock: [Function (anonymous)],
          unsubscribe: [Function (anonymous)],
          all: [Function: all],
          del: [Function (anonymous)],
          render: [Function: render],
          listen: [Function: listen],
          request: IncomingMessage { app: [Circular *1] },
          response: ServerResponse { app: [Circular *1] },
          cache: {},
          engines: {},
          settings: {
            'x-powered-by': true,
            etag: 'weak',
            'etag fn': [Function: generateETag],
            env: 'development',
            'query parser': 'extended',
            'query parser fn': [Function: parseExtendedQueryString],
            'subdomain offset': 2,
            'trust proxy': false,
            'trust proxy fn': [Function: trustNone],
            view: [Function: View],
            views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
            'jsonp callback name': 'callback'
          },
          locals: [Object: null prototype] {
            settings: {
              'x-powered-by': true,
              etag: 'weak',
              'etag fn': [Function: generateETag],
              env: 'development',
              'query parser': 'extended',
              'query parser fn': [Function: parseExtendedQueryString],
              'subdomain offset': 2,
              'trust proxy': false,
              'trust proxy fn': [Function: trustNone],
              view: [Function: View],
              views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
              'jsonp callback name': 'callback'
            }
          },
          mountpath: '/',
          _router: [Function: router] {
            params: {},
            _params: [],
            caseSensitive: false,
            mergeParams: undefined,
            strict: false,
            stack: [
              Layer {
                handle: [Function: query],
                name: 'query',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: expressInit],
                name: 'expressInit',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: corsMiddleware],
                name: 'corsMiddleware',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: jsonParser],
                name: 'jsonParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: urlencodedParser],
                name: 'urlencodedParser',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function: router] {
                  params: {},
                  _params: [],
                  caseSensitive: undefined,
                  mergeParams: undefined,
                  strict: undefined,
                  stack: [
                    Layer {
                      handle: [Function: router] {
                        params: {},
                        _params: [],
                        caseSensitive: undefined,
                        mergeParams: undefined,
                        strict: undefined,
                        stack: [
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/create-user\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/create-user',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                },
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          }
                        ]
                      },
                      name: 'router',
                      params: undefined,
                      path: undefined,
                      keys: [],
                      regexp: /^\/users\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: undefined
                    },
                    Layer {
                      handle: [Function: router] {
                        params: {},
                        _params: [],
                        caseSensitive: undefined,
                        mergeParams: undefined,
                        strict: undefined,
                        stack: [
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: {},
                            path: '/create-semester',
                            keys: [],
                            regexp: /^\/create-semester\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/create-semester',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                },
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'post'
                                }
                              ],
                              methods: { post: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: { id: 'create-semester' },
                            path: '/create-semester',
                            keys: [
                              {
                                name: 'id',
                                optional: false,
                                offset: 1
                              }
                            ],
                            regexp: /^\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/:id',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: { id: 'create-semester' },
                            path: '/create-semester',
                            keys: [
                              {
                                name: 'id',
                                optional: false,
                                offset: 1
                              }
                            ],
                            regexp: /^\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/:id',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'patch'
                                },
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'patch'
                                }
                              ],
                              methods: { patch: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: { id: 'create-semester' },
                            path: '/create-semester',
                            keys: [
                              {
                                name: 'id',
                                optional: false,
                                offset: 1
                              }
                            ],
                            regexp: /^\/(?:([^\/]+?))\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/:id',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'delete'
                                }
                              ],
                              methods: { delete: true }
                            }
                          },
                          Layer {
                            handle: [Function: bound dispatch],
                            name: 'bound dispatch',
                            params: undefined,
                            path: undefined,
                            keys: [],
                            regexp: /^\/?$/i {
                              fast_star: false,
                              fast_slash: false
                            },
                            route: Route {
                              path: '/',
                              stack: [
                                Layer {
                                  handle: [Function (anonymous)],
                                  name: '<anonymous>',
                                  params: undefined,
                                  path: undefined,
                                  keys: [],
                                  regexp: /^\/?$/i {
                                    fast_star: false,
                                    fast_slash: false
                                  },
                                  method: 'get'
                                }
                              ],
                              methods: { get: true }
                            }
                          }
                        ]
                      },
                      name: 'router',
                      params: {},
                      path: '/academic-semesters',
                      keys: [],
                      regexp: /^\/academic-semesters\/?(?=\/|$)/i {
                        fast_star: false,
                        fast_slash: false
                      },
                      route: undefined
                    }
                  ]
                },
                name: 'router',
                params: {},
                path: '/api/v1',
                keys: [],
                regexp: /^\/api\/v1\/?(?=\/|$)/i {
                  fast_star: false,
                  fast_slash: false
                },
                route: undefined
              },
              Layer {
                handle: [Function: globalErrorHandler],
                name: 'globalErrorHandler',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              },
              Layer {
                handle: [Function (anonymous)],
                name: '<anonymous>',
                params: {},
                path: '',
                keys: [],
                regexp: /^\/?(?=\/|$)/i { fast_star: false, fast_slash: true },
                route: undefined
              }
            ]
          }
        },
        connection: [Function: connectionListener]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: TCP {
        reading: false,
        onconnection: [Function: onconnection],
        [Symbol(owner_symbol)]: [Circular *2]
      },
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::5000',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 830,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 65305,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 829,
        [Symbol(triggerId)]: 0
      },
      [Symbol(kUniqueHeaders)]: null
    },
    parser: HTTPParser {
      '0': null,
      '1': [Function: parserOnHeaders],
      '2': [Function: parserOnHeadersComplete],
      '3': [Function: parserOnBody],
      '4': [Function: parserOnMessageComplete],
      '5': [Function: bound onParserExecute],
      '6': [Function: bound onParserTimeout],
      _headers: [],
      _url: '',
      socket: [Circular *3],
      incoming: null,
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      [Symbol(resource_symbol)]: HTTPServerAsyncResource {
        type: 'HTTPINCOMINGMESSAGE',
        socket: [Circular *3]
      }
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    setEncoding: [Function: socketSetEncoding],
    _paused: false,
    _httpMessage: null,
    timeout: 5000,
    [Symbol(async_id_symbol)]: 1170,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular *3]
    },
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 5000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 86033,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 1223,
      [Symbol(triggerId)]: 1220
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kSetNoDelay)]: true,
    [Symbol(kSetKeepAlive)]: false,
    [Symbol(kSetKeepAliveInitialDelay)]: 0,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _consuming: true,
  _dumped: false,
  next: [Function: next],
  baseUrl: '',
  originalUrl: '/api/v1/academic-semesters/create-semester',
  _parsedUrl: Url {
    protocol: null,
    slashes: null,
    auth: null,
    host: null,
    port: null,
    hostname: null,
    hash: null,
    search: null,
    query: null,
    pathname: '/api/v1/academic-semesters/create-semester',
    path: '/api/v1/academic-semesters/create-semester',
    href: '/api/v1/academic-semesters/create-semester',
    _raw: '/api/v1/academic-semesters/create-semester'
  },
  params: {},
  query: {},
  res: <ref *4> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: '329',
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    socket: null,
    _header: 'HTTP/1.1 200 OK\r\n' +
      'X-Powered-By: Express\r\n' +
      'Access-Control-Allow-Origin: *\r\n' +
      'Content-Type: application/json; charset=utf-8\r\n' +
      'Content-Length: 329\r\n' +
      'ETag: W/"149-RPexn+fxFz9pHyrWa35tFnh0aeo"\r\n' +
      'Date: Mon, 28 Aug 2023 03:10:47 GMT\r\n' +
      'Connection: keep-alive\r\n' +
      'Keep-Alive: timeout=5\r\n' +
      '\r\n',
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    req: IncomingMessage {
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: true,
        endEmitted: true,
        reading: false,
        constructed: true,
        sync: false,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: true,
        autoDestroy: true,
        destroyed: true,
        errored: null,
        closed: true,
        closeEmitted: true,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: true,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      socket: <ref *3> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [Function: bound socketOnClose],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *2> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          requestTimeout: 300000,
          headersTimeout: 60000,
          keepAliveTimeout: 5000,
          connectionsCheckingInterval: 30000,
          joinDuplicateHeaders: undefined,
          _events: [Object: null prototype] {
            request: <ref *1> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *1] },
              response: ServerResponse { app: [Circular *1] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: corsMiddleware],
                    name: 'corsMiddleware',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [Function: router] {
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: [
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/create-user\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/create-user',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    },
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    }
                                  ],
                                  methods: { post: true }
                                }
                              }
                            ]
                          },
                          name: 'router',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/users\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: router] {
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: [
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: {},
                                path: '/create-semester',
                                keys: [],
                                regexp: /^\/create-semester\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/create-semester',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    },
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    }
                                  ],
                                  methods: { post: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: { id: 'create-semester' },
                                path: '/create-semester',
                                keys: [
                                  {
                                    name: 'id',
                                    optional: false,
                                    offset: 1
                                  }
                                ],
                                regexp: /^\/(?:([^\/]+?))\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/:id',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'get'
                                    }
                                  ],
                                  methods: { get: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: { id: 'create-semester' },
                                path: '/create-semester',
                                keys: [
                                  {
                                    name: 'id',
                                    optional: false,
                                    offset: 1
                                  }
                                ],
                                regexp: /^\/(?:([^\/]+?))\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/:id',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'patch'
                                    },
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'patch'
                                    }
                                  ],
                                  methods: { patch: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: { id: 'create-semester' },
                                path: '/create-semester',
                                keys: [
                                  {
                                    name: 'id',
                                    optional: false,
                                    offset: 1
                                  }
                                ],
                                regexp: /^\/(?:([^\/]+?))\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/:id',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'delete'
                                    }
                                  ],
                                  methods: { delete: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'get'
                                    }
                                  ],
                                  methods: { get: true }
                                }
                              }
                            ]
                          },
                          name: 'router',
                          params: {},
                          path: '/academic-semesters',
                          keys: [],
                          regexp: /^\/academic-semesters\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/api/v1',
                    keys: [],
                    regexp: /^\/api\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: globalErrorHandler],
                    name: 'globalErrorHandler',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *2]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          noDelay: true,
          keepAlive: false,
          keepAliveInitialDelay: 0,
          httpAllowHalfOpen: false,
          timeout: 0,
          maxHeadersCount: null,
          maxRequestsPerSocket: 0,
          _connectionKey: '6::::5000',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 830,
          [Symbol(http.server.connections)]: ConnectionsList {},
          [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
            _idleTimeout: 30000,
            _idlePrev: [TimersList],
            _idleNext: [TimersList],
            _idleStart: 65305,
            _onTimeout: [Function: bound checkConnections],
            _timerArgs: undefined,
            _repeat: 30000,
            _destroyed: false,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 829,
            [Symbol(triggerId)]: 0
          },
          [Symbol(kUniqueHeaders)]: null
        },
        _server: <ref *2> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          requestTimeout: 300000,
          headersTimeout: 60000,
          keepAliveTimeout: 5000,
          connectionsCheckingInterval: 30000,
          joinDuplicateHeaders: undefined,
          _events: [Object: null prototype] {
            request: <ref *1> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *1] },
              response: ServerResponse { app: [Circular *1] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: corsMiddleware],
                    name: 'corsMiddleware',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [Function: router] {
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: [
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/create-user\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/create-user',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    },
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    }
                                  ],
                                  methods: { post: true }
                                }
                              }
                            ]
                          },
                          name: 'router',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/users\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: router] {
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: [
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: {},
                                path: '/create-semester',
                                keys: [],
                                regexp: /^\/create-semester\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/create-semester',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    },
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    }
                                  ],
                                  methods: { post: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: { id: 'create-semester' },
                                path: '/create-semester',
                                keys: [
                                  {
                                    name: 'id',
                                    optional: false,
                                    offset: 1
                                  }
                                ],
                                regexp: /^\/(?:([^\/]+?))\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/:id',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'get'
                                    }
                                  ],
                                  methods: { get: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: { id: 'create-semester' },
                                path: '/create-semester',
                                keys: [
                                  {
                                    name: 'id',
                                    optional: false,
                                    offset: 1
                                  }
                                ],
                                regexp: /^\/(?:([^\/]+?))\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/:id',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'patch'
                                    },
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'patch'
                                    }
                                  ],
                                  methods: { patch: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: { id: 'create-semester' },
                                path: '/create-semester',
                                keys: [
                                  {
                                    name: 'id',
                                    optional: false,
                                    offset: 1
                                  }
                                ],
                                regexp: /^\/(?:([^\/]+?))\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/:id',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'delete'
                                    }
                                  ],
                                  methods: { delete: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'get'
                                    }
                                  ],
                                  methods: { get: true }
                                }
                              }
                            ]
                          },
                          name: 'router',
                          params: {},
                          path: '/academic-semesters',
                          keys: [],
                          regexp: /^\/academic-semesters\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/api/v1',
                    keys: [],
                    regexp: /^\/api\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: globalErrorHandler],
                    name: 'globalErrorHandler',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *2]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          noDelay: true,
          keepAlive: false,
          keepAliveInitialDelay: 0,
          httpAllowHalfOpen: false,
          timeout: 0,
          maxHeadersCount: null,
          maxRequestsPerSocket: 0,
          _connectionKey: '6::::5000',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 830,
          [Symbol(http.server.connections)]: ConnectionsList {},
          [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
            _idleTimeout: 30000,
            _idlePrev: [TimersList],
            _idleNext: [TimersList],
            _idleStart: 65305,
            _onTimeout: [Function: bound checkConnections],
            _timerArgs: undefined,
            _repeat: 30000,
            _destroyed: false,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 829,
            [Symbol(triggerId)]: 0
          },
          [Symbol(kUniqueHeaders)]: null
        },
        parser: HTTPParser {
          '0': null,
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *3],
          incoming: null,
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *3]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        setEncoding: [Function: socketSetEncoding],
        _paused: false,
        _httpMessage: null,
        timeout: 5000,
        [Symbol(async_id_symbol)]: 1170,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *3]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: 5000,
          _idlePrev: [TimersList],
          _idleNext: [TimersList],
          _idleStart: 86033,
          _onTimeout: [Function: bound ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 1223,
          [Symbol(triggerId)]: 1220
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: false,
        [Symbol(kSetKeepAliveInitialDelay)]: 0,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'Content-Type',
        'application/json',
        'User-Agent',
        'PostmanRuntime/7.32.3',
        'Accept',
        '*/*',
        'Postman-Token',
        '03037cc9-2415-4aba-a4d7-02d75db8390a',
        'Host',
        'localhost:5000',
        'Accept-Encoding',
        'gzip, deflate, br',
        'Connection',
        'keep-alive',
        'Content-Length',
        '117'
      ],
      rawTrailers: [],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '/api/v1/academic-semesters/create-semester',
      method: 'POST',
      statusCode: null,
      statusMessage: null,
      client: <ref *3> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: BufferList { head: null, tail: null, length: 0 },
          length: 0,
          pipes: [],
          flowing: true,
          ended: false,
          endEmitted: false,
          reading: true,
          constructed: true,
          sync: false,
          needReadable: true,
          emittedReadable: false,
          readableListening: false,
          resumeScheduled: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          destroyed: false,
          errored: null,
          closed: false,
          closeEmitted: false,
          defaultEncoding: 'utf8',
          awaitDrainWriters: null,
          multiAwaitDrain: false,
          readingMore: false,
          dataEmitted: false,
          decoder: null,
          encoding: null,
          [Symbol(kPaused)]: false
        },
        _events: [Object: null prototype] {
          end: [
            [Function: onReadableStreamEnd],
            [Function: bound socketOnEnd]
          ],
          timeout: [Function: socketOnTimeout],
          data: [Function: bound socketOnData],
          error: [Function: socketOnError],
          close: [Function: bound socketOnClose],
          drain: [Function: bound socketOnDrain],
          resume: [Function: onSocketResume],
          pause: [Function: onSocketPause]
        },
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: WritableState {
          objectMode: false,
          highWaterMark: 16384,
          finalCalled: false,
          needDrain: false,
          ending: false,
          ended: false,
          finished: false,
          destroyed: false,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          length: 0,
          writing: false,
          corked: 0,
          sync: false,
          bufferProcessing: false,
          onwrite: [Function: bound onwrite],
          writecb: null,
          writelen: 0,
          afterWriteTickInfo: null,
          buffered: [],
          bufferedIndex: 0,
          allBuffers: true,
          allNoop: true,
          pendingcb: 0,
          constructed: true,
          prefinished: false,
          errorEmitted: false,
          emitClose: false,
          autoDestroy: true,
          errored: null,
          closed: false,
          closeEmitted: false,
          [Symbol(kOnFinished)]: []
        },
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: <ref *2> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          requestTimeout: 300000,
          headersTimeout: 60000,
          keepAliveTimeout: 5000,
          connectionsCheckingInterval: 30000,
          joinDuplicateHeaders: undefined,
          _events: [Object: null prototype] {
            request: <ref *1> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *1] },
              response: ServerResponse { app: [Circular *1] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: corsMiddleware],
                    name: 'corsMiddleware',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [Function: router] {
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: [
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/create-user\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/create-user',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    },
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    }
                                  ],
                                  methods: { post: true }
                                }
                              }
                            ]
                          },
                          name: 'router',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/users\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: router] {
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: [
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: {},
                                path: '/create-semester',
                                keys: [],
                                regexp: /^\/create-semester\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/create-semester',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    },
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    }
                                  ],
                                  methods: { post: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: { id: 'create-semester' },
                                path: '/create-semester',
                                keys: [
                                  {
                                    name: 'id',
                                    optional: false,
                                    offset: 1
                                  }
                                ],
                                regexp: /^\/(?:([^\/]+?))\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/:id',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'get'
                                    }
                                  ],
                                  methods: { get: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: { id: 'create-semester' },
                                path: '/create-semester',
                                keys: [
                                  {
                                    name: 'id',
                                    optional: false,
                                    offset: 1
                                  }
                                ],
                                regexp: /^\/(?:([^\/]+?))\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/:id',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'patch'
                                    },
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'patch'
                                    }
                                  ],
                                  methods: { patch: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: { id: 'create-semester' },
                                path: '/create-semester',
                                keys: [
                                  {
                                    name: 'id',
                                    optional: false,
                                    offset: 1
                                  }
                                ],
                                regexp: /^\/(?:([^\/]+?))\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/:id',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'delete'
                                    }
                                  ],
                                  methods: { delete: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'get'
                                    }
                                  ],
                                  methods: { get: true }
                                }
                              }
                            ]
                          },
                          name: 'router',
                          params: {},
                          path: '/academic-semesters',
                          keys: [],
                          regexp: /^\/academic-semesters\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/api/v1',
                    keys: [],
                    regexp: /^\/api\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: globalErrorHandler],
                    name: 'globalErrorHandler',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *2]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          noDelay: true,
          keepAlive: false,
          keepAliveInitialDelay: 0,
          httpAllowHalfOpen: false,
          timeout: 0,
          maxHeadersCount: null,
          maxRequestsPerSocket: 0,
          _connectionKey: '6::::5000',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 830,
          [Symbol(http.server.connections)]: ConnectionsList {},
          [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
            _idleTimeout: 30000,
            _idlePrev: [TimersList],
            _idleNext: [TimersList],
            _idleStart: 65305,
            _onTimeout: [Function: bound checkConnections],
            _timerArgs: undefined,
            _repeat: 30000,
            _destroyed: false,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 829,
            [Symbol(triggerId)]: 0
          },
          [Symbol(kUniqueHeaders)]: null
        },
        _server: <ref *2> Server {
          maxHeaderSize: undefined,
          insecureHTTPParser: undefined,
          requestTimeout: 300000,
          headersTimeout: 60000,
          keepAliveTimeout: 5000,
          connectionsCheckingInterval: 30000,
          joinDuplicateHeaders: undefined,
          _events: [Object: null prototype] {
            request: <ref *1> [Function: app] {
              _events: [Object: null prototype] { mount: [Function: onmount] },
              _eventsCount: 1,
              _maxListeners: undefined,
              setMaxListeners: [Function: setMaxListeners],
              getMaxListeners: [Function: getMaxListeners],
              emit: [Function: emit],
              addListener: [Function: addListener],
              on: [Function: addListener],
              prependListener: [Function: prependListener],
              once: [Function: once],
              prependOnceListener: [Function: prependOnceListener],
              removeListener: [Function: removeListener],
              off: [Function: removeListener],
              removeAllListeners: [Function: removeAllListeners],
              listeners: [Function: listeners],
              rawListeners: [Function: rawListeners],
              listenerCount: [Function: listenerCount],
              eventNames: [Function: eventNames],
              init: [Function: init],
              defaultConfiguration: [Function: defaultConfiguration],
              lazyrouter: [Function: lazyrouter],
              handle: [Function: handle],
              use: [Function: use],
              route: [Function: route],
              engine: [Function: engine],
              param: [Function: param],
              set: [Function: set],
              path: [Function: path],
              enabled: [Function: enabled],
              disabled: [Function: disabled],
              enable: [Function: enable],
              disable: [Function: disable],
              acl: [Function (anonymous)],
              bind: [Function (anonymous)],
              checkout: [Function (anonymous)],
              connect: [Function (anonymous)],
              copy: [Function (anonymous)],
              delete: [Function (anonymous)],
              get: [Function (anonymous)],
              head: [Function (anonymous)],
              link: [Function (anonymous)],
              lock: [Function (anonymous)],
              'm-search': [Function (anonymous)],
              merge: [Function (anonymous)],
              mkactivity: [Function (anonymous)],
              mkcalendar: [Function (anonymous)],
              mkcol: [Function (anonymous)],
              move: [Function (anonymous)],
              notify: [Function (anonymous)],
              options: [Function (anonymous)],
              patch: [Function (anonymous)],
              post: [Function (anonymous)],
              propfind: [Function (anonymous)],
              proppatch: [Function (anonymous)],
              purge: [Function (anonymous)],
              put: [Function (anonymous)],
              rebind: [Function (anonymous)],
              report: [Function (anonymous)],
              search: [Function (anonymous)],
              source: [Function (anonymous)],
              subscribe: [Function (anonymous)],
              trace: [Function (anonymous)],
              unbind: [Function (anonymous)],
              unlink: [Function (anonymous)],
              unlock: [Function (anonymous)],
              unsubscribe: [Function (anonymous)],
              all: [Function: all],
              del: [Function (anonymous)],
              render: [Function: render],
              listen: [Function: listen],
              request: IncomingMessage { app: [Circular *1] },
              response: ServerResponse { app: [Circular *1] },
              cache: {},
              engines: {},
              settings: {
                'x-powered-by': true,
                etag: 'weak',
                'etag fn': [Function: generateETag],
                env: 'development',
                'query parser': 'extended',
                'query parser fn': [Function: parseExtendedQueryString],
                'subdomain offset': 2,
                'trust proxy': false,
                'trust proxy fn': [Function: trustNone],
                view: [Function: View],
                views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
                'jsonp callback name': 'callback'
              },
              locals: [Object: null prototype] {
                settings: {
                  'x-powered-by': true,
                  etag: 'weak',
                  'etag fn': [Function: generateETag],
                  env: 'development',
                  'query parser': 'extended',
                  'query parser fn': [Function: parseExtendedQueryString],
                  'subdomain offset': 2,
                  'trust proxy': false,
                  'trust proxy fn': [Function: trustNone],
                  view: [Function: View],
                  views: 'C:\\Users\\Admin\\Desktop\\CoU\\university-management-auth-service\\views',
                  'jsonp callback name': 'callback'
                }
              },
              mountpath: '/',
              _router: [Function: router] {
                params: {},
                _params: [],
                caseSensitive: false,
                mergeParams: undefined,
                strict: false,
                stack: [
                  Layer {
                    handle: [Function: query],
                    name: 'query',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: expressInit],
                    name: 'expressInit',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: corsMiddleware],
                    name: 'corsMiddleware',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: jsonParser],
                    name: 'jsonParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: urlencodedParser],
                    name: 'urlencodedParser',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: router] {
                      params: {},
                      _params: [],
                      caseSensitive: undefined,
                      mergeParams: undefined,
                      strict: undefined,
                      stack: [
                        Layer {
                          handle: [Function: router] {
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: [
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/create-user\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/create-user',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    },
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    }
                                  ],
                                  methods: { post: true }
                                }
                              }
                            ]
                          },
                          name: 'router',
                          params: undefined,
                          path: undefined,
                          keys: [],
                          regexp: /^\/users\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: undefined
                        },
                        Layer {
                          handle: [Function: router] {
                            params: {},
                            _params: [],
                            caseSensitive: undefined,
                            mergeParams: undefined,
                            strict: undefined,
                            stack: [
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: {},
                                path: '/create-semester',
                                keys: [],
                                regexp: /^\/create-semester\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/create-semester',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    },
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'post'
                                    }
                                  ],
                                  methods: { post: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: { id: 'create-semester' },
                                path: '/create-semester',
                                keys: [
                                  {
                                    name: 'id',
                                    optional: false,
                                    offset: 1
                                  }
                                ],
                                regexp: /^\/(?:([^\/]+?))\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/:id',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'get'
                                    }
                                  ],
                                  methods: { get: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: { id: 'create-semester' },
                                path: '/create-semester',
                                keys: [
                                  {
                                    name: 'id',
                                    optional: false,
                                    offset: 1
                                  }
                                ],
                                regexp: /^\/(?:([^\/]+?))\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/:id',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'patch'
                                    },
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'patch'
                                    }
                                  ],
                                  methods: { patch: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: { id: 'create-semester' },
                                path: '/create-semester',
                                keys: [
                                  {
                                    name: 'id',
                                    optional: false,
                                    offset: 1
                                  }
                                ],
                                regexp: /^\/(?:([^\/]+?))\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/:id',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'delete'
                                    }
                                  ],
                                  methods: { delete: true }
                                }
                              },
                              Layer {
                                handle: [Function: bound dispatch],
                                name: 'bound dispatch',
                                params: undefined,
                                path: undefined,
                                keys: [],
                                regexp: /^\/?$/i {
                                  fast_star: false,
                                  fast_slash: false
                                },
                                route: Route {
                                  path: '/',
                                  stack: [
                                    Layer {
                                      handle: [Function (anonymous)],
                                      name: '<anonymous>',
                                      params: undefined,
                                      path: undefined,
                                      keys: [],
                                      regexp: /^\/?$/i {
                                        fast_star: false,
                                        fast_slash: false
                                      },
                                      method: 'get'
                                    }
                                  ],
                                  methods: { get: true }
                                }
                              }
                            ]
                          },
                          name: 'router',
                          params: {},
                          path: '/academic-semesters',
                          keys: [],
                          regexp: /^\/academic-semesters\/?(?=\/|$)/i {
                            fast_star: false,
                            fast_slash: false
                          },
                          route: undefined
                        }
                      ]
                    },
                    name: 'router',
                    params: {},
                    path: '/api/v1',
                    keys: [],
                    regexp: /^\/api\/v1\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: false
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function: globalErrorHandler],
                    name: 'globalErrorHandler',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  },
                  Layer {
                    handle: [Function (anonymous)],
                    name: '<anonymous>',
                    params: {},
                    path: '',
                    keys: [],
                    regexp: /^\/?(?=\/|$)/i {
                      fast_star: false,
                      fast_slash: true
                    },
                    route: undefined
                  }
                ]
              }
            },
            connection: [Function: connectionListener]
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          _connections: 1,
          _handle: TCP {
            reading: false,
            onconnection: [Function: onconnection],
            [Symbol(owner_symbol)]: [Circular *2]
          },
          _usingWorkers: false,
          _workers: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          noDelay: true,
          keepAlive: false,
          keepAliveInitialDelay: 0,
          httpAllowHalfOpen: false,
          timeout: 0,
          maxHeadersCount: null,
          maxRequestsPerSocket: 0,
          _connectionKey: '6::::5000',
          [Symbol(IncomingMessage)]: [Function: IncomingMessage],
          [Symbol(ServerResponse)]: [Function: ServerResponse],
          [Symbol(kCapture)]: false,
          [Symbol(async_id_symbol)]: 830,
          [Symbol(http.server.connections)]: ConnectionsList {},
          [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
            _idleTimeout: 30000,
            _idlePrev: [TimersList],
            _idleNext: [TimersList],
            _idleStart: 65305,
            _onTimeout: [Function: bound checkConnections],
            _timerArgs: undefined,
            _repeat: 30000,
            _destroyed: false,
            [Symbol(refed)]: false,
            [Symbol(kHasPrimitive)]: false,
            [Symbol(asyncId)]: 829,
            [Symbol(triggerId)]: 0
          },
          [Symbol(kUniqueHeaders)]: null
        },
        parser: HTTPParser {
          '0': null,
          '1': [Function: parserOnHeaders],
          '2': [Function: parserOnHeadersComplete],
          '3': [Function: parserOnBody],
          '4': [Function: parserOnMessageComplete],
          '5': [Function: bound onParserExecute],
          '6': [Function: bound onParserTimeout],
          _headers: [],
          _url: '',
          socket: [Circular *3],
          incoming: null,
          outgoing: null,
          maxHeaderPairs: 2000,
          _consumed: true,
          onIncoming: [Function: bound parserOnIncoming],
          [Symbol(resource_symbol)]: HTTPServerAsyncResource {
            type: 'HTTPINCOMINGMESSAGE',
            socket: [Circular *3]
          }
        },
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        setEncoding: [Function: socketSetEncoding],
        _paused: false,
        _httpMessage: null,
        timeout: 5000,
        [Symbol(async_id_symbol)]: 1170,
        [Symbol(kHandle)]: TCP {
          reading: true,
          onconnection: null,
          _consumed: true,
          [Symbol(owner_symbol)]: [Circular *3]
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: 5000,
          _idlePrev: [TimersList],
          _idleNext: [TimersList],
          _idleStart: 86033,
          _onTimeout: [Function: bound ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 1223,
          [Symbol(triggerId)]: 1220
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: true,
        [Symbol(kSetKeepAlive)]: false,
        [Symbol(kSetKeepAliveInitialDelay)]: 0,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '',
      originalUrl: '/api/v1/academic-semesters/create-semester',
      _parsedUrl: Url {
        protocol: null,
        slashes: null,
        auth: null,
        host: null,
        port: null,
        hostname: null,
        hash: null,
        search: null,
        query: null,
        pathname: '/api/v1/academic-semesters/create-semester',
        path: '/api/v1/academic-semesters/create-semester',
        href: '/api/v1/academic-semesters/create-semester',
        _raw: '/api/v1/academic-semesters/create-semester'
      },
      params: {},
      query: {},
      res: [Circular *4],
      body: {
        title: 'Autumn',
        year: '2028',
        code: '01',
        startMonth: 'January',
        endMonth: 'June'
      },
      _body: true,
      length: undefined,
      route: Route {
        path: '/create-semester',
        stack: [
          Layer {
            handle: [Function (anonymous)],
            name: '<anonymous>',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'post'
          },
          Layer {
            handle: [Function (anonymous)],
            name: '<anonymous>',
            params: undefined,
            path: undefined,
            keys: [],
            regexp: /^\/?$/i { fast_star: false, fast_slash: false },
            method: 'post'
          }
        ],
        methods: { post: true }
      },
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        'content-type': 'application/json',
        'user-agent': 'PostmanRuntime/7.32.3',
        accept: '*/*',
        'postman-token': '03037cc9-2415-4aba-a4d7-02d75db8390a',
        host: 'localhost:5000',
        'accept-encoding': 'gzip, deflate, br',
        connection: 'keep-alive',
        'content-length': '117'
      },
      [Symbol(kHeadersCount)]: 16,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    _sent100: false,
    _expect_continue: false,
    _maxRequestsPerSocket: 0,
    locals: [Object: null prototype] {},
    statusCode: 200,
    statusMessage: 'OK',
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [ 'X-Powered-By', 'Express' ],
      'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ],
      'content-type': [ 'Content-Type', 'application/json; charset=utf-8' ],
      'content-length': [ 'Content-Length', '329' ],
      etag: [ 'ETag', 'W/"149-RPexn+fxFz9pHyrWa35tFnh0aeo"' ]
    },
    [Symbol(errored)]: null,
    [Symbol(kUniqueHeaders)]: null
  },
  body: {
    title: 'Autumn',
    year: '2028',
    code: '01',
    startMonth: 'January',
    endMonth: 'June'
  },
  _body: true,
  length: undefined,
  route: Route {
    path: '/create-semester',
    stack: [
      Layer {
        handle: [Function (anonymous)],
        name: '<anonymous>',
        params: undefined,
        path: undefined,
        keys: [],
        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
        method: 'post'
      },
      Layer {
        handle: [Function (anonymous)],
        name: '<anonymous>',
        params: undefined,
        path: undefined,
        keys: [],
        regexp: /^\/?$/i { fast_star: false, fast_slash: false },
        method: 'post'
      }
    ],
    methods: { post: true }
  },
  level: 'error',
  message: '🐱‍🏍 globalErrorHandler ~~',
  label: 'CoU',
  timestamp: '2023-08-28T03:10:47.137Z',
  [Symbol(kCapture)]: false,
  [Symbol(kHeaders)]: {
    'content-type': 'application/json',
    'user-agent': 'PostmanRuntime/7.32.3',
    accept: '*/*',
    'postman-token': '03037cc9-2415-4aba-a4d7-02d75db8390a',
    host: 'localhost:5000',
    'accept-encoding': 'gzip, deflate, br',
    connection: 'keep-alive',
    'content-length': '117'
  },
  [Symbol(kHeadersCount)]: 16,
  [Symbol(kTrailers)]: null,
  [Symbol(kTrailersCount)]: 0
}
